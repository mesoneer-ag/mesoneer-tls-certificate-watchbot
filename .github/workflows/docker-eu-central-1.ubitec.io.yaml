# This file serves as the template to generate GitHub Workflow.
name: "Check docker-eu-central-1.ubitec.io Certificate"

on:
  push:
    branches:
      - main
      - master
  schedule:
    # Run every day at 0:00am
    - cron: '0 0 * * *'

env:
  DOMAIN: 'docker-eu-central-1.ubitec.io'
  PORT: '443'

jobs:
  check-certificate:
    runs-on: ubuntu-latest
    steps:
      - name: Probe certificate
        id: probe_cert
        run: | 
          notAfter=$(echo \
            | openssl s_client -servername ${{ env.DOMAIN }} -connect ${{ env.DOMAIN }}:${{ env.PORT }} 2>/dev/null \
            | openssl x509 -noout -dates \
            | grep notAfter)
          echo "::set-output name=notAfter::${notAfter/notAfter=/}"

      - name: Show expiration date
        id: debug
        run: |
          echo ${{ steps.probe_cert.outputs.notAfter }}

      - name: Calculate how many days until the certificate expires
        id: calculate_dates_until_expiration
        run: |
          notAfter="${{ steps.probe_cert.outputs.notAfter }}"

          # Copied shamelessly from:
          # https://unix.stackexchange.com/questions/24626/quickly-calculate-date-differences
          datediff() {
            d1=$(date -d "$1" +%s)
            d2=$(date -d "$2" +%s)
            echo $(( (d1 - d2) / 86400 ))
          }

          days=$(datediff "$notAfter" "$(date)")
          echo "${days} to expire"
          echo "::set-output name=daysLeft::${days}"

      - name: Determine if alerts should be sent
        id: should_alert
        uses: actions/github-script@v3
        with:
          script: |-
            const domain = "${{ env.DOMAIN }}";
            const notAfter = "${{ steps.probe_cert.outputs.notAfter }}";
            const daysLeft = Number.parseInt('${{ steps.calculate_dates_until_expiration.outputs.daysLeft }}');
            console.log("[info] - Days left until expiry date: " + daysLeft);

            const range = (lower, upper) => ({ contains: (value) => lower <= value && value <= upper });
            const alertingRangesOfDaysLeft = [range(0, 5), range(9, 10), range(19, 20), range(29, 30)];
            const shouldAlert = alertingRangesOfDaysLeft.some(r => r.contains(daysLeft));
            const forceNotification = "${{ secrets.FORCE_NOTIFICATION }}" === "true";

            if (forceNotification === false && shouldAlert === false) {
              return {
                shouldAlert
              }
            }

            teamsMessagePayload = {
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "f1c40f",
              "summary": "TLS Certificate Expiration Alerts",
              "sections": [
                {
                  "activityTitle": `TLS Certificate for \`${domain}\` is about to expire`,
                  "activitySubtitle": "ubitec TLS Monitoring",
                  "activityImage": "https://github.com/ubitechq/ubitec-tls-certificate-monitor/raw/master/yellow-circle-warning.png",
                  "facts": [
                    {
                        "name": "Site",
                        "value": `https://${domain}`
                    },
                    {
                    "name": "Expiration Date",
                    "value": `${notAfter}`
                    },
                    {
                      "name": "Days Left",
                      "value": `${daysLeft}`
                    }
                  ],
                  "markdown": true
                }
              ]
            };

            return {
              shouldAlert: true,
              teamsMessagePayload: JSON.stringify(teamsMessagePayload)
            }

      - name: Send alert to Teams if needed
        id: teams_send
        if: ${{ fromJson(steps.should_alert.outputs.result).shouldAlert }}
        run: |
          curl -X POST \
            --url ${{ secrets.TEAMS_WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            --data '${{ fromJson(steps.should_alert.outputs.result).teamsMessagePayload }}'

